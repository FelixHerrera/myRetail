package com.myRetail;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
public class ProductController {
	//Key for target api
	private final String KEY = "43cJWpLjH8Z8oR18KdrZDBKAgLLQKJjz";
	//URL to access target api for product name retrieval
	private final String URL = "https://api.target.com/products/v3/{id}?fields=descriptions&id_type=TCIN&key={key}";
	
	//restTemplate to extract JSON into an object
	@Autowired
	private RestTemplate restTemplate;
	
	//MongoDB data store of prices
	@Autowired
	private PriceRepository repository;
	
	//Get request that will return JSON of a products id, name, and price
	@RequestMapping(value = "/products/{id}", method = RequestMethod.GET, produces = "application/json")
	public String returnProduct(@PathVariable("id") long id){
		
		Product item = new Product();
		ProductResponse productResponse = restTemplate.getForObject(URL, 
				ProductResponse.class, id, KEY);
		//JSON parsing
		Items productList = productResponse.getItemDescription();
				
		//Check to see if an item was found
		for(Product p : productList.getItemInfo()){
			if(p != null){
				p.setId(id);
				item = p;
			}
			else{
				return "Product does not exist.\n";
			}
		}
		//If the item does not exist in Target's data inform the user.
		if(item.getName() == null)
			return "{\"id\":" + id + ",\"name\":" + null
			+ ",\"price\":\"Product not found\"}";
		
		
		
		return "{\"id\":" + item.getId() + ",\"name\":\"" + item.getName() 
		+ "\"," + repository.findById(item.getId()) + "}";
	}
	
	//Put request that will take in a price parameter and return the same JSON as the get request with the
	//price changed
	@RequestMapping(value = "/products/{id}", method = RequestMethod.PUT, produces = "application/json")
	public @ResponseBody String changePrice(@PathVariable long id, @RequestParam(required=true) double price){
		Product item = new Product();
		
		ProductResponse productResponse = restTemplate.getForObject(URL, 
				ProductResponse.class, id, KEY);
		//JSON parsing
		Items productList = productResponse.getItemDescription();
		
		//Check if the product exists
		for(Product p : productList.getItemInfo()){
			if(p != null){
				p.setId(id);
				item = p;
			}
			else{
				return "Product does not exist.\n";
			}
		}
		
		//If the product does not exist in Target's data, inform the user.
		if(item.getName() == null)
			return "Item with id "+ item.getId() + " does not exist, please check the id and try again.";
		
		//Check if the price is located in the data store
		Price p = repository.findById(item.getId());
		
		//If the price is in the data store, update it otherwise add it
		if(p == null){
			repository.save(new Price(item.getId(), price, "USD"));
		}
		else{
			p.setPrice(price);
			repository.save(p);
		}
		
		//Return formatted JSON
		return "{\"id\":" + item.getId() + ",\"name\":\"" + item.getName() 
		+ "\"," + repository.findById(item.getId()) + "}";
	}
}
