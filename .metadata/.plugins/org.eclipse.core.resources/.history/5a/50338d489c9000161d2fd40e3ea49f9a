package com.myRetail;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
public class ProductController {
	
	public String name;
	private final String KEY = "43cJWpLjH8Z8oR18KdrZDBKAgLLQKJjz";
	private final String URL = "https://api.target.com/products/v3/{id}?fields=descriptions&id_type=TCIN&key={key}";
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private PriceRepository repository;
	
	@RequestMapping(value = "/products/{id}", method = RequestMethod.GET, produces = "application/json")
	public String returnProduct(@PathVariable("id") long id){
		Product item = new Product();
		
		ProductResponse productResponse = restTemplate.getForObject(URL, 
				ProductResponse.class, id, KEY);
		Items productList = productResponse.getItemDescription();
		
//		System.out.println("Id = " + id);
		
		for(Product p : productList.getItemInfo()){
			if(p == null){
				System.out.println("id invalid");
			}
			p.setId(id);
			System.out.println(p.getName() + " " + p.getId());
			item = p;
		}
		
		if(item.getName() == null)
			return "Item with id "+ item.getId() + " does not exist, please check the id and try again.";
		
		
		
		return "{\"id\":" + item.getId() + ",\"name\":\"" + item.getName() 
		+ "\"," + repository.findById(item.getId()) + "}";
	}
	
	@RequestMapping(value = "/products/{id}", method = RequestMethod.PUT, produces = "application/json")
	public String changePrice(@PathVariable long id, @RequestParam(required=true) double price){
Product item = new Product();
		
		ProductResponse productResponse = restTemplate.getForObject(URL, 
				ProductResponse.class, id, KEY);
		Items productList = productResponse.getItemDescription();
		
//		System.out.println("Id = " + id);
		
		for(Product p : productList.getItemInfo()){
			if(p == null){
				System.out.println("id invalid");
			}
			p.setId(id);
			System.out.println(p.getName() + " " + p.getId());
			item = p;
		}
		
		if(item.getName() == null)
			return "Item with id "+ item.getId() + " does not exist, please check the id and try again.";
		
		Price p = repository.findById(item.getId());
		
		if(p != null){
			repository.save(new Price(item.getId(), price, "USD"));
		}
		else{
			p.setPrice(price);
			repository.save(p);
		}
		
		return "{\"id\":" + item.getId() + ",\"name\":\"" + item.getName() 
		+ "\"," + repository.findById(item.getId()) + "}";
	}
}
